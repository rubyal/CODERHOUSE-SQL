###Inserci칩n de datos###


create database juegosolimpicos;
use juegosolimpicos;

create table athlete(
id_athlete int not null auto_increment, 
name varchar (70), 
sex varchar (2), 
age int,
height int,
weight float,
PRIMARY KEY(id_athlete));

select * from athlete;

insert into athlete(name, sex, age, height, weight) values('A Dijiang', 'M', 24, 180, 80);
insert into athlete(name, sex, age, height, weight) values('A Lamusi', 'M', 23, 170, 60);
insert into athlete(name, sex, age, height, weight) values('Gunnar Nielsen Aaby', 'M', 24, 176, 70);
insert into athlete(name, sex, age, height, weight) values('Edgar Lindenau Aabye', 'M', 34, 176, 70);
insert into athlete(name, sex, age, height, weight) values('Christine Jacoba Aaftink', 'F', 21, 185, 82);

select * from athlete;

create table sport(
id_sport int,
sport varchar (60),
PRIMARY KEY (id_sport));

select * from sport;

create table event(
id_event int,
event varchar (60),
PRIMARY KEY (id_event));

select * from event;

create table NOC(
id_noc int, 
noc varchar (5),
PRIMARY KEY (id_noc));

select * from NOC;

create table season(
id_season int,
season varchar (20),
PRIMARY KEY (id_season));

select * from season;

create table year(
id_year int,
year int,
PRIMARY KEY (id_year));

select * from year;

create table games(
id_games int,
id_year int,
id_season int,
PRIMARY KEY (id_games),
FOREIGN KEY(id_year) REFERENCES year(id_year),
FOREIGN KEY(id_season) REFERENCES season(id_season));

select * from games;

create table city(
id_city int,
city varchar (45),
PRIMARY KEY (id_city)
);

select * from city;

create table medal(
id_medal int,
medal varchar (10),
PRIMARY KEY (id_medal)
);

select * from medal;

create table hechosathlete(
id_hechos int not null,
id_athlete int not null, 
id_year int,
id_season int,
id_noc int,
id_games int,
id_city int,
id_sport int,
id_event int,
id_medal int,
PRIMARY KEY(id_hechos),
FOREIGN KEY(id_athlete) REFERENCES athlete(id_athlete),
FOREIGN KEY(id_year) REFERENCES year(id_year),
FOREIGN KEY(id_season) REFERENCES season(id_season),
FOREIGN KEY(id_noc) REFERENCES NOC(id_noc),
FOREIGN KEY(id_games) REFERENCES games(id_games),
FOREIGN KEY(id_city) REFERENCES city(id_city),
FOREIGN KEY(id_sport) REFERENCES sport(id_sport),
FOREIGN KEY(id_event) REFERENCES event(id_event),
FOREIGN KEY(id_medal) REFERENCES medal(id_medal));

select * from hechosathlete;


###Vistas###


USE juegosolimpicos;

CREATE VIEW medaloro_athlete AS select a.name as name, h.id_medal AS medal_oro FROM hechosathlete h 
LEFT JOIN athlete a ON h.id_athlete = a.id_athlete WHERE id_medal = 2;

SELECT * FROM medaloro_athlete;


CREATE VIEW MEDALOROCOUNT_ATHLETE AS SELECT A.NAME, A.AGE, COUNT(H.ID_MEDAL) AS COUNT_MEDAL_ORO FROM ATHLETE A 
LEFT JOIN HECHOSATHLETE H ON A.ID_ATHLETE=H.ID_ATHLETE WHERE ID_MEDAL=2 
GROUP BY H.ID_ATHLETE ORDER BY ID_MEDAL DESC LIMIT 10;

SELECT * FROM MEDALOROCOUNT_ATHLETE;

CREATE VIEW MEDALBRONZE_ATHLETE AS SELECT A.NAME, A.AGE, H.ID_MEDAL AS MEDAL FROM ATHLETE A 
LEFT JOIN HECHOSATHLETE H ON A.ID_ATHLETE=H.ID_ATHLETE 
WHERE AGE >= 25 AND ID_MEDAL = 3 GROUP BY H.ID_ATHLETE ORDER BY ID_MEDAL DESC LIMIT 5;

SELECT * FROM MEDALBRONZE_ATHLETE;

CREATE VIEW CITYLONDON_ATHLETE AS SELECT A.NAME, S.SPORT, C.CITY, H.ID_MEDAL AS MEDAL, N.NOC FROM HECHOSATHLETE H 
LEFT JOIN ATHLETE A ON H.ID_ATHLETE=A.ID_ATHLETE 
LEFT JOIN SPORT S ON H.ID_SPORT= S.ID_SPORT
LEFT JOIN CITY C ON H.ID_CITY=C.ID_CITY
LEFT JOIN NOC N ON H.ID_NOC=N.ID_NOC
WHERE CITY LIKE 'LONDON'GROUP BY H.ID_ATHLETE LIMIT 3;

SELECT * FROM CITYLONDON_ATHLETE;

CREATE VIEW HOCKEY_ATHLETE AS SELECT A.NAME, S.SPORT, Y.YEAR, SE.SEASON, H.ID_MEDAL, M.MEDAL FROM HECHOSATHLETE H 
LEFT JOIN ATHLETE A ON H.ID_ATHLETE=A.ID_ATHLETE
LEFT JOIN  SEASON SE ON H.ID_SEASON=SE.ID_SEASON
LEFT JOIN YEAR Y ON H.ID_YEAR=Y.ID_YEAR
LEFT JOIN SPORT S ON H.ID_SPORT=S.ID_SPORT
LEFT JOIN MEDAL M ON H.ID_MEDAL=M.ID_MEDAL
WHERE SPORT LIKE 'HOCKEY';

SELECT * FROM HOCKEY_ATHLETE;

CREATE VIEW GAMESSUMMER_ATHLETE AS SELECT DISTINCT A.NAME, SE.SEASON, Y.YEAR FROM HECHOSATHLETE H 
LEFT JOIN ATHLETE A ON H.ID_ATHLETE=A.ID_ATHLETE
LEFT JOIN  SEASON SE ON H.ID_SEASON=SE.ID_SEASON
LEFT JOIN YEAR Y ON H.ID_YEAR=Y.ID_YEAR
WHERE SE.SEASON LIKE 'SUMMER' GROUP BY H.ID_ATHLETE ORDER BY YEAR;

SELECT * FROM GAMESSUMMER_ATHLETE;


###Functions###


USE JUEGOSOLIMPICOS;


SELECT * FROM HECHOSATHLETE;
SELECT * FROM ATHLETE;
SELECT * FROM MEDAL;


DELIMITER #
CREATE FUNCTION GET_MEDAL_AHTLETE(PARAM_ATHLETE INT)
RETURNS CHAR(50)
READS SQL DATA
DETERMINISTIC
BEGIN 
	DECLARE MEDAL_ATHLETE CHAR(50);
    SELECT M.MEDAL INTO MEDAL_ATHLETE
    FROM MEDAL M
    WHERE ID_MEDAL=PARAM_ATHLETE;
RETURN MEDAL_ATHLETE;
END #
DELIMITER ;


DROP FUNCTION GET_MEDAL_AHTLETE;


SELECT H.ID_ATHLETE, GET_MEDAL_AHTLETE(ID_MEDAL) AS NAMEMEDAL FROM HECHOSATHLETE H;
SELECT H.ID_ATHLETE, H.ID_MEDAL, GET_MEDAL_AHTLETE(ID_MEDAL) AS NAMEMEDAL FROM HECHOSATHLETE H;




DELIMITER #
CREATE FUNCTION GET_MEDAL_AHTLETE1(PARAM_ATHLETE INT)
RETURNS INT
READS SQL DATA
DETERMINISTIC
BEGIN 
	DECLARE MEDAL_ATHLETE INT;
    SELECT COUNT(ID_MEDAL) INTO MEDAL_ATHLETE
    FROM HECHOSATHLETE
    WHERE ID_MEDAL=PARAM_ATHLETE;
RETURN MEDAL_ATHLETE;
END #
DELIMITER ;

DROP FUNCTION GET_MEDAL_AHTLETE1;

SELECT GET_MEDAL_AHTLETE1(1) AS MEDAL_NA;
SELECT GET_MEDAL_AHTLETE1(2) AS MEDAL_GOLD;
SELECT GET_MEDAL_AHTLETE1(3) AS MEDAL_BRONZE;
SELECT GET_MEDAL_AHTLETE1(4) AS MEDAL_SILVER;



###Stored procedures###



DELIMITER ##
CREATE PROCEDURE ORDENAMIENTO_RANGO_EDAD1 (IN CANT_EDAD INT, IN CANT_EDAD2 INT, IN ORDEN BOOLEAN)
BEGIN 
	SET @CANTIDAD_AGE = (SELECT COUNT(*) FROM ATHLETE WHERE AGE BETWEEN CANT_EDAD AND CANT_EDAD2);
	IF@CANTIDAD_AGE <> ''  AND ORDEN = 1 THEN 
		SELECT * FROM ATHLETE WHERE AGE BETWEEN CANT_EDAD AND CANT_EDAD2 ORDER BY AGE ASC;
	ELSEIF @CANTIDAD_AGE <> ''  AND ORDEN = 0 THEN 
		SELECT * FROM ATHLETE WHERE AGE BETWEEN CANT_EDAD AND CANT_EDAD2 ORDER BY AGE DESC;
	ELSEIF @CANTIDAD_AGE <> '' AND orden NOT IN (0,1) THEN
		SET @ordenar = 'No v치lido';
		SELECT 'Par치metro de ordenamiento ingresado no v치lido' AS Mensaje;
	ELSEIF @CANTIDAD_AGE = 0 THEN
         SELECT 'NO EXISTE' AS MENSAJE;
		END IF;
    
END ##
DELIMITER ;

CALL ORDENAMIENTO_RANGO_EDAD1(20, 40, 1);
CALL ORDENAMIENTO_RANGO_EDAD1(20, 40, 0);
CALL ORDENAMIENTO_RANGO_EDAD1(1, 4, 0);
CALL ORDENAMIENTO_RANGO_EDAD1(22, 40, 5);


##DROP PROCEDURE IF EXISTS DELET_HECHO;
SELECT * FROM hechosathlete;

DELIMITER ##
CREATE PROCEDURE INSE_HECHO (IN PARAM_ID_HECHO INT, IN PARAM_ID_ATHLETE INT, IN PARAM_ID_YEAR INT, IN PARAM_ID_SEASON INT, IN PARAM_ID_NOC INT, IN PARAM_ID_GAMES INT, IN PARAM_ID_CITY INT, IN PARAM_ID_SPORT INT, IN PARAM_ID_EVENT INT, IN PARAM_ID_MEDAL INT)
BEGIN 
	 INSERT INTO HECHOSATHLETE(ID_HECHOS, ID_ATHLETE, ID_YEAR, ID_SEASON, ID_NOC, ID_GAMES, ID_CITY, ID_SPORT, ID_EVENT, ID_MEDAL) values(PARAM_ID_HECHO, PARAM_ID_ATHLETE, PARAM_ID_YEAR, PARAM_ID_SEASON, PARAM_ID_NOC, PARAM_ID_GAMES, PARAM_ID_CITY, PARAM_ID_SPORT, PARAM_ID_EVENT, PARAM_ID_MEDAL);
END ##
DELIMITER ;
CALL INSE_HECHO (100, 2, 32, 1, 1, 34, 1, 3, 1, 1);

SELECT * FROM hechosathlete;

DELIMITER ## 
CREATE PROCEDURE DELET_HECHO (IN PARAM_ID_REG INT)
BEGIN 
	DELETE FROM HECHOSATHLETE WHERE ID_HECHOS = PARAM_ID_REG;
END ##
DELIMITER ;

CALL DELET_HECHO (100);

SELECT * FROM hechosathlete;

####Triggers###


USE juegosolimpicos;

SELECT * FROM hechosathlete;
DESCRIBE ATHLETE;


DROP TABLE IF EXISTS LOG_INSERCION_ATHLETE;
CREATE TABLE LOG_INSERCION_ATHLETE
(id_log INT PRIMARY KEY AUTO_INCREMENT,
id_athlete INT NOT NULL,
name varchar(70),
sex varchar(2),
age int, 
height int,
weight float,
usuario VARCHAR (60),
fecha_hora DATETIME
);



DROP TRIGGER IF EXISTS  LOG_INSERCION_ATHLETE;
CREATE TRIGGER LOG_INSERCION_ATHLETE
AFTER INSERT ON athlete 
FOR EACH ROW
INSERT INTO LOG_INSERCION_ATHLETE VALUES 
(DEFAULT, new.id_athlete, new.name, new.sex, new.age, new.height, new.weight, USER(), NOW());
SELECT * FROM LOG_INSERCION_ATHLETE;
INSERT INTO ATHLETE VALUES (DEFAULT, 'HOLA', 'M', 70, 180, 80);
SELECT * FROM LOG_INSERCION_ATHLETE;
SELECT * FROM ATHLETE;



DROP TABLE IF EXISTS LOG_MODIFICACION_ATHLETE;
CREATE TABLE LOG_MODIFICACION_ATHLETE_NAME(
id_log INT PRIMARY KEY AUTO_INCREMENT,
id_athlete INT NOT NULL,
viejo_name VARCHAR(70),
nuevo_name VARCHAR(70),
usuario VARCHAR (60),
fecha_hora DATETIME
);

DROP TRIGGER IF EXISTS  LOG_MODIFICACION_ATHLETE;
CREATE TRIGGER LOG_MODIFICACION_ATHLETE_NAME
AFTER UPDATE ON ATHLETE
FOR EACH ROW
INSERT INTO LOG_MODIFICACION_ATHLETE_NAME VALUES (DEFAULT, old.id_athlete, old.name, new.name, USER(), NOW());


SELECT * FROM LOG_MODIFICACION_ATHLETE_NAME;
UPDATE ATHLETE SET name='love' where id_athlete=101;
UPDATE ATHLETE SET name='love2'  where id_athlete=101;
SELECT * FROM LOG_MODIFICACION_ATHLETE_NAME;

DROP TABLE IF EXISTS LOG_DELETE_ATHLETE_NAME;
CREATE TABLE LOG_DELETE_ATHLETE_NAME(
id_log INT PRIMARY KEY AUTO_INCREMENT,
id_athlete INT NOT NULL,
name varchar(70),
sex varchar(2),
age int, 
height int,
weight float,
usuario VARCHAR (60),
fecha_hora DATETIME
);

DROP TRIGGER IF EXISTS LOG_DELETE_ATHLETE_NAME;
CREATE TRIGGER LOG_DELETE_ATHLETE_NAME
AFTER DELETE ON ATHLETE
FOR EACH ROW 
INSERT INTO LOG_DELETE_ATHLETE_NAME VALUES(DEFAULT, old.id_athlete, old.name, old.sex, old.age, old.height, old.weight, USER(), NOW());

SELECT * FROM LOG_DELETE_ATHLETE_NAME;
DELETE FROM ATHLETE WHERE ID_ATHLETE >= 101;
SELECT * FROM LOG_DELETE_ATHLETE_NAME;

SELECT * FROM ATHLETE;


SELECT * FROM HECHOSATHLETE;


DROP TABLE IF EXISTS LOG_INSERCION_HECHOSATHLETE;
CREATE TABLE LOG_INSERCION_HECHOSATHLETE
(id_log INT PRIMARY KEY AUTO_INCREMENT,
id_hechos INT NOT NULL,
id_athlete INT NOT NULL,
id_year INT,
id_season INT,
id_noc INT, 
id_games INT,
id_city INT,
id_sport INT,
id_event INT,
id_medal INT,
usuario VARCHAR (60),
fecha_hora DATETIME
);


DROP TRIGGER IF EXISTS  LOG_INSERCION_HECHOSATHLETE;
CREATE TRIGGER LOG_INSERCION_HECHOSATHLETE
AFTER INSERT ON hechosathlete 
FOR EACH ROW
INSERT INTO LOG_INSERCION_HECHOSATHLETE VALUES 
(DEFAULT, new.id_hechos, new.id_athlete, new.id_year, new.id_season, new.id_noc, new.id_games, new.id_city,  new.id_sport,  new.id_event,  new.id_medal, USER(), NOW());
SELECT * FROM LOG_INSERCION_HECHOSATHLETE;
INSERT INTO HECHOSATHLETE VALUES (102, 1, 1, 1, 1, 1, 1, 1, 1, 1);
SELECT * FROM LOG_INSERCION_HECHOSATHLETE;
SELECT * FROM HECHOSATHLETE;
DESCRIBE HECHOSATHLETE;

DROP TABLE IF EXISTS LOG_DELETE_ATHLETE;
CREATE TABLE LOG_DELETE_HECHOSATHLETE(
id_log INT PRIMARY KEY AUTO_INCREMENT,
id_hecho INT NOT NULL,
id_athlete INT NOT NULL,
id_year INT,
id_season INT,
id_noc INT, 
id_games INT,
id_city INT,
id_sport INT,
id_event INT,
id_medal INT,
usuario VARCHAR (60),
fecha_hora DATETIME
);


DROP TRIGGER IF EXISTS  LOG_DELETE_HECHOSATHLETE;
CREATE TRIGGER LOG_DELETE_HECHOSATHLETE
AFTER DELETE ON HECHOSATHLETE
FOR EACH ROW
INSERT INTO LOG_DELETE_HECHOSATHLETE VALUES 
(DEFAULT, old.id_hechos, old.id_athlete, old.id_year, old.id_season, old.id_noc, old.id_games, old.id_city, old.id_sport,  old.id_event,  old.id_medal, USER(), NOW());


SELECT * FROM LOG_DELETE_HECHOSATHLETE;
DELETE FROM HECHOSATHLETE WHERE ID_HECHOS >=102;
SELECT * FROM LOG_DELETE_HECHOSATHLETE;

SELECT * FROM HECHOSATHLETE;